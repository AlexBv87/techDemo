export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Project Home Use the apexdox.homePagePath  setting to point to an HTML file that contains details about your project. The body of the HTML will show up here instead of this default!"
    },
    {
        "title": "CaseServiceLayer",
        "fileName": "CaseServiceLayer.html",
        "text": "CaseServiceLayer Service Layyer for the Case Obejct Signature public class CaseServiceLayer See CaseTriggerHandler CaseServiceLayer Methods completeMilestones(newCases, mapOldCases) completeMilestones(newCases, mapOldCases) Signature public static void completeMilestones(List<Case> newCases, Map<Id,Case> mapOldCases)"
    },
    {
        "title": "CaseTriggerHandler",
        "fileName": "CaseTriggerHandler.html",
        "text": "CaseTriggerHandler trigger handler using framework Signature public class CaseTriggerHandler extends TriggerHandler See TriggerHandler CaseTriggerHandler Properties Name Signature Annotations circuitBreaker private static Exception circuitBreaker @TestVisible triggerMapNew private Map<Id, Case> triggerMapNew triggerMapOld private Map<Id, Case> triggerMapOld triggerNew private List<Case> triggerNew triggerOld private List<Case> triggerOld CaseTriggerHandler Constructors CaseTriggerHandler() Constructor that sets class variables based on Trigger context vars CaseTriggerHandler() Constructor that sets class variables based on Trigger context vars Signature public CaseTriggerHandler() CaseTriggerHandler Methods afterUpdate() after update context method. afterUpdate() after update context method. Signature @SuppressWarnings('PMD.ApexCRUDViolation') public override void afterUpdate() CaseTriggerHandler.CaseTriggerHandlerException Custom exception class Signature public class CaseTriggerHandlerException extends Exception"
    },
    {
        "title": "DocGenClass",
        "fileName": "DocGenClass.html",
        "text": "DocGenClass Signature public with sharing class DocGenClass DocGenClass Constructors DocGenClass() This is the description! DocGenClass() This is the description! Signature public DocGenClass()"
    },
    {
        "title": "MilestoneUtils",
        "fileName": "MilestoneUtils.html",
        "text": "MilestoneUtils class for Milestone Closure Signature public class MilestoneUtils See CaseServiceLayer MilestoneUtils Methods completeMilestone(caseIds, milestoneName, complDate) completeMilestone(caseIds, milestoneName, complDate) Signature public static void completeMilestone(Set<Id> caseIds,    String milestoneName, DateTime complDate)"
    },
    {
        "title": "ServiceOperations",
        "fileName": "ServiceOperations.html",
        "text": "ServiceOperations Signature public class ServiceOperations ServiceOperations Methods getCases(caseNumber, subject, priority, status, contactName) getCases(caseNumber, subject, priority, status, contactName) Signature public static List<Case> getCases(        String caseNumber,        String subject,        String priority,        String status,        String contactName    )"
    },
    {
        "title": "TriggerHandler",
        "fileName": "TriggerHandler.html",
        "text": "TriggerHandler An opinionated trigger handler framework. provided by Salesforce in Apex Recepies Signature public virtual class TriggerHandler See CaseTriggerHandler TriggerHandler Properties Name Signature Annotations bypassedHandlers private static Set<String> bypassedHandlers context protected TriggerContext context @testVisible isTriggerExecuting private Boolean isTriggerExecuting @testVisible loopCountMap private static Map<String, LoopCount> loopCountMap Enums Name Signature Values Description TriggerContext public enum TriggerContext BEFORE_INSERT, BEFORE_UPDATE, BEFORE_DELETE, AFTER_INSERT, AFTER_UPDATE, AFTER_DELETE, AFTER_UNDELETE possible trigger contexts TriggerHandler Constructors TriggerHandler() Constructs a trigger handler object and ensures the context is set TriggerHandler() Constructs a trigger handler object and ensures the context is set Signature public TriggerHandler() TriggerHandler Methods addToLoopCount() increment the loop count afterDelete() Virtual method for the implementing class to override afterInsert() Virtual method for the implementing class to override afterUndelete() Virtual method for the implementing class to override afterUpdate() Virtual method for the implementing class to override beforeDelete() Virtual method for the implementing class to override beforeInsert() context methods beforeUpdate() Virtual method for the implementing class to override bypass(handlerName) Allows developers to conditionally bypass(disable) other triggers that *also* implement this triggerHandler clearAllBypasses() removes all classes from the bypass list clearBypass(handlerName) Removes a given trigger handler class name from the list of bypassed trigger handlers. clearMaxLoopCount() Allows developers to turn off the max loop count getHandlerName() Returns the string version of the handler class being invoked isBypassed(handlerName) Allows developers to check whether a given trigger handler class is currently bypassed. run() This is main brokering method that is called by the trigger. It's responsible for determining the proper context, and calling the correct method setMaxLoopCount(max) Allows developers to prevent trigger loops, or allow a limited number of them by setting the maximum number of times this trigger is called. setTriggerContext() private instancemethods setTriggerContext(ctx, testMode) Internal method for manually setting the trigger context validateRun() make sure this trigger should continue to run addToLoopCount() increment the loop count Signature @testVisible protected void addToLoopCount() Exceptions Throws loop count exception if the max loop count is reached afterDelete() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void afterDelete() afterInsert() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void afterInsert() afterUndelete() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void afterUndelete() afterUpdate() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void afterUpdate() beforeDelete() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void beforeDelete() beforeInsert() context methods Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void beforeInsert() beforeUpdate() Virtual method for the implementing class to override Signature @SuppressWarnings('PMD.EmptyStatementBlock') protected virtual void beforeUpdate() bypass(handlerName) Allows developers to conditionally bypass(disable) other triggers that *also* implement this triggerHandler Signature public static void bypass(String handlerName) Parameters handlerName Type: String Class name(String) of the trigger handler to bypass Example TriggerHandler.bypass('AccountTriggerHandler'); clearAllBypasses() removes all classes from the bypass list Signature public static void clearAllBypasses() Example Triggerhandler.clearAllBypasses(); clearBypass(handlerName) Removes a given trigger handler class name from the list of bypassed trigger handlers. Signature public static void clearBypass(String handlerName) Parameters handlerName Type: String Handler class name to remove from the bypass list Example TriggerHandler.clearBypass('AccountTriggerHandler'); clearMaxLoopCount() Allows developers to turn off the max loop count Signature public void clearMaxLoopCount() Example In the context of a TriggerHandler class, this.clearMaxLoopCount(); getHandlerName() Returns the string version of the handler class being invoked Signature @testVisible private String getHandlerName() Returns String  Name of the Handler isBypassed(handlerName) Allows developers to check whether a given trigger handler class is currently bypassed. Signature public static Boolean isBypassed(String handlerName) Parameters handlerName Type: String The name of the trigger handler class to check for Returns Boolean run() This is main brokering method that is called by the trigger. It's responsible for determining the proper context, and calling the correct method Signature public virtual void run() Example AccountTriggerHandler.run(); setMaxLoopCount(max) Allows developers to prevent trigger loops, or allow a limited number of them by setting the maximum number of times this trigger is called. Signature public void setMaxLoopCount(Integer max) Parameters max Type: Integer A valid number(generally 1) of times you'd like to allow the trigger to run. Example In the context of a TriggerHandler class, this.setMaxLoopCount(5); setTriggerContext() private instancemethods Signature @testVisible private void setTriggerContext() setTriggerContext(ctx, testMode) Internal method for manually setting the trigger context Signature @testVisible private void setTriggerContext(String ctx, Boolean testMode) Parameters ctx Type: String The current trigger Context testMode Type: Boolean Is the trigger running in a test context? validateRun() make sure this trigger should continue to run Signature @testVisible protected Boolean validateRun() Returns Boolean Exceptions TriggerHandlerException thrown when executing outside of a trigger TriggerHandler.LoopCount inner classes Signature @testVisible private class LoopCount TriggerHandler.LoopCount Properties Name Signature count private Integer count max private Integer max TriggerHandler.LoopCount Constructors LoopCount() Loop counter method with default of 5. LoopCount(max) Sets loop count based on the param. LoopCount() Loop counter method with default of 5. Signature public LoopCount() LoopCount(max) Sets loop count based on the param. Signature public LoopCount(Integer max) Parameters max Type: Integer Maximum number of loops to allow. TriggerHandler.LoopCount Methods exceeded() Determines if this we're about to exceed the loop count. getCount() Returns the current loop count. getMax() Returns the max loop count. increment() Increment the internal counter returning the results of this.exceeded(). setMax(max) Sets the max loop size exceeded() Determines if this we're about to exceed the loop count. Signature public Boolean exceeded() Returns Boolean  true if less than 0 or more than max. getCount() Returns the current loop count. Signature public Integer getCount() Returns Integer  current loop count. getMax() Returns the max loop count. Signature public Integer getMax() Returns Integer  max loop count. increment() Increment the internal counter returning the results of this.exceeded(). Signature public Boolean increment() Returns Boolean  true if count will exceed max count or is less than 0. setMax(max) Sets the max loop size Signature public void setMax(Integer max) Parameters max Type: Integer The integer to set max to. TriggerHandler.TriggerHandlerException Internal TriggerHandler custom exception class Signature public class TriggerHandlerException extends Exception"
    }
];
